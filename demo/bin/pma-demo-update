#!/bin/bash

# Script to update repositories for the demo server
# Requires $HOME/scripts to be a checkout of the scripts repository

# Fail on undefined variables
set -u
# Fail on failure
set -e
# If a script fails, stop before the next pipe
set -o pipefail

FORCE_MODE="0"
QUIET_MODE="0"
OFFLINE_MODE="0"
LOG_FILE="/dev/null"

# Source: https://stackoverflow.com/a/31024664/5155484
while [[ $# -gt 0 ]]
do
    key="$1"
    while [[ ${key+x} ]]
    do
        case $key in
            --offline)
                OFFLINE_MODE="1"
                ;;
            --force)
                FORCE_MODE="1"
                ;;
            -q)
                QUIET_MODE="1"
                ;;
            --log-file)
                LOG_FILE="$2"
                shift # option has parameter
                ;;
            *)
                # unknown option
                echo "Unknown option: $key" #1>&2
                exit 10
                ;;
        esac
        # prepare for next option in this key, if any
        [[ "$key" = -? || "$key" == --* ]] && unset key || key="${key/#-?/-}"
    done
    shift # option(s) fully processed, proceed to next input argument
done

debugLog() {
    echo "$1" >> "$LOG_FILE"
    if [ "${QUIET_MODE}" = "1" ] ; then
        return
    fi
    echo "$1"
}

SCRIPTS_FOLDER="${SCRIPTS_FOLDER:-$HOME/scripts}"

# Directory where repositories are stored
GIT_STORAGE="${GIT_STORAGE:-$HOME/.pma-demo}"

# Directory where built folders are stored
WEB_STORAGE="${WEB_STORAGE:-$HOME/.pma-demo-web}"
# The user group to own the files
WEB_GROUP="${WEB_GROUP:-www-data}"

# Remote URL of repository to checkout
REMOTE="${REMOTE:-https://github.com/phpmyadmin/phpmyadmin.git}"
REMOTE_THEMES="${REMOTE_THEMES:-https://github.com/phpmyadmin/themes.git}"

# List of repositories to checkout
VARIANTS=$(awk '/^variants/ {print $3}' "$SCRIPTS_FOLDER/demo/php/versions.ini")
THEMES=$(awk '/^themes/ {print $3}' "$SCRIPTS_FOLDER/demo/php/versions.ini")

debugLog "Updating themes"

# Clone / update themes
if [ -d "$GIT_STORAGE/themes/.git" ] ; then
    cd "$GIT_STORAGE/themes"
    # Remove local theme changes
    git reset --hard -q
    if [ $OFFLINE_MODE = 0 ] ; then
        git pull -q
    fi
else
    git clone "$REMOTE_THEMES" "$GIT_STORAGE/themes"
fi

# Clone / update phpMyAdmin
if [ -d "$GIT_STORAGE/phpMyAdmin/.git" ] ; then
    cd "$GIT_STORAGE/phpMyAdmin"
    # Remove local changes
    git reset --hard -q
    if [ $OFFLINE_MODE = 0 ] ; then
        git fetch --all -p
    fi
    git checkout temp 2> /dev/null 1> /dev/null
else
    git clone "$REMOTE" "$GIT_STORAGE/phpMyAdmin"
    git checkout -b temp 2> /dev/null 1> /dev/null
fi

debugLog "Deleting stale worktrees"
cd "$GIT_STORAGE/phpMyAdmin"

WORKTREES="$(git worktree list --porcelain | grep -F "worktree" | cut -d ' ' -f 2)"

# Delete stale worktrees
for WORKTREE_PATH in $WORKTREES ; do
    if [ "$WORKTREE_PATH" = "$GIT_STORAGE/phpMyAdmin" ] ; then
        # Skip the current path
        continue
    fi

    debugLog "Checking worktree $WORKTREE_PATH"
    WORKTREE_NAME=${WORKTREE_PATH##*/}
    for VARIANT_DATA in $VARIANTS ; do
        VARIANT_NAME=${VARIANT_DATA%%:*}
        if [ -z "$VARIANT_NAME" ] ; then
            debugLog "Invalid variant data: $VARIANT_DATA"
            continue
        fi

        if [ "$VARIANT_NAME" = "$WORKTREE_NAME" ] ; then
            # Skip the item
            continue 2
        fi
    done
    debugLog "Deleting stale worktree $WORKTREE_PATH"
    git worktree remove "$WORKTREE_PATH"
done

unset WORKTREES
cd - > /dev/null

# Build worktrees
for VARIANT_DATA in $VARIANTS ; do
    VARIANT_NAME=${VARIANT_DATA%%:*}
    VARIANT_BRANCH=${VARIANT_DATA##*:}
    if [ -z "$VARIANT_NAME" ] || [ -z "$VARIANT_BRANCH" ] ; then
        debugLog "Invalid variant data: $VARIANT_DATA"
        continue
    fi

    # Only one worktree per branch is possible
    WORKTREE_PATH="$GIT_STORAGE/$VARIANT_BRANCH"

    if [ -d "$WORKTREE_PATH" ] ; then
        debugLog "Updating worktree $VARIANT_BRANCH for $VARIANT_NAME at $WORKTREE_PATH"
        cd "$WORKTREE_PATH"
        # Remove local changes
        git reset --hard -q
        if [ $OFFLINE_MODE = 0 ] ; then
            git pull -q
        fi
        cd - > /dev/null
    else
        debugLog "Creating worktree $VARIANT_BRANCH for $VARIANT_NAME at $WORKTREE_PATH"
        git worktree add "$WORKTREE_PATH" "$VARIANT_BRANCH"
    fi
done

# Cleanup worktree folders
for VARIANT_DATA in $VARIANTS ; do
    VARIANT_NAME=${VARIANT_DATA%%:*}
    VARIANT_BRANCH=${VARIANT_DATA##*:}
    if [ -z "$VARIANT_NAME" ] || [ -z "$VARIANT_BRANCH" ] ; then
        debugLog "Invalid variant data: $VARIANT_DATA"
        continue
    fi

    WORKTREE_PATH="$GIT_STORAGE/$VARIANT_BRANCH"

    #if [ -d "$WORKTREE_PATH/release" ] ; then
        #debugLog "Cleaning old release files"
        #rm -rf "$WORKTREE_PATH/release"
    #fi
done

# Build web folders
for VARIANT_DATA in $VARIANTS ; do
    VARIANT_NAME=${VARIANT_DATA%%:*}
    VARIANT_BRANCH=${VARIANT_DATA##*:}
    if [ -z "$VARIANT_NAME" ] || [ -z "$VARIANT_BRANCH" ] ; then
        debugLog "Invalid variant data: $VARIANT_DATA"
        continue
    fi

    WORKTREE_PATH="$GIT_STORAGE/$VARIANT_BRANCH"

    debugLog "Building from $WORKTREE_PATH"
    cd "$WORKTREE_PATH"
    VERSION="$(grep -F "version" package.json | cut -d '"' -f 4)"
    debugLog "Building version $VERSION from branch $VARIANT_BRANCH"

    SKIP_BUILD=0
    if [ -f "$WORKTREE_PATH/release/phpMyAdmin-$VERSION.json" ] ; then
        BUILT_COMMIT="$(grep -F "commit" "$WORKTREE_PATH/release/phpMyAdmin-$VERSION.json" |cut -d '"' -f 4)"
        debugLog "Already built at commit $BUILT_COMMIT"

        CURRENT_COMMIT=$(git log -n 1 --format=format:'%H')
        if [ "$CURRENT_COMMIT" = "$BUILT_COMMIT" ] && [ $FORCE_MODE = 0 ] ; then
            debugLog "Skipping building version $VERSION from branch $VARIANT_BRANCH"
            SKIP_BUILD=1
            continue
        fi
    fi

    RELEASE_SCRIPT="$WORKTREE_PATH/scripts/create-release.sh"
    THEMES_FOLDER="themes"
    if [ -f "$WORKTREE_PATH/bin/internal/create-release.sh" ] ; then
        RELEASE_SCRIPT="$WORKTREE_PATH/bin/internal/create-release.sh"
        THEMES_FOLDER="public/themes"
    fi

    if [ $SKIP_BUILD = 0 ] ; then
        SCRIPT_OPTIONS="--daily --no-sign --revision-info --compressions tgz --kits all-languages"
        if [ "$VARIANT_BRANCH" = "STABLE" ] ; then
            # Remove this when 5.2.2 is out
            SCRIPT_OPTIONS="--daily"
            debugLog "Skipping, the build is broken anyway"
            continue
        fi
        debugLog "Building the release"
        COMPOSER_DISABLE_NETWORK="$OFFLINE_MODE" "$RELEASE_SCRIPT" "$VERSION" "$VARIANT_BRANCH" $SCRIPT_OPTIONS > $LOG_FILE
    fi

    TARBALL_TO_INSTALL="$WORKTREE_PATH/release/phpMyAdmin-$VERSION-all-languages.tar.gz"
    if [ ! -f "$TARBALL_TO_INSTALL" ] ; then
        debugLog "Unable to find $TARBALL_TO_INSTALL"
        continue
    fi

    WEB_FOLDER="$WEB_STORAGE/$VARIANT_NAME"
    if [ -d "$WEB_FOLDER" ] ; then
        debugLog "Cleaning up $WEB_FOLDER"
        rm -rf "$WEB_FOLDER"
    fi

    debugLog "Creating $WEB_FOLDER"
    mkdir "$WEB_FOLDER"
    chgrp "$WEB_GROUP" "$WEB_FOLDER"

    debugLog "Extracting $TARBALL_TO_INSTALL to $WEB_FOLDER"
    tar -xz --strip-components=1 --directory="${WEB_FOLDER}" -f "${TARBALL_TO_INSTALL}"

    # Symlink configuration
    FLAVOUR=${VARIANT_NAME#*-}
    debugLog "Flavour $FLAVOUR, copying configs"
    if [ -f "$SCRIPTS_FOLDER/demo/php/config-$FLAVOUR.inc.php" ] ; then
        cp "$SCRIPTS_FOLDER/demo/php/config-$FLAVOUR.inc.php" "$WEB_FOLDER/config.inc.php"
    else
        cp "$SCRIPTS_FOLDER/demo/php/config.inc.php" "$WEB_FOLDER/config.inc.php"
    fi
    cp "$SCRIPTS_FOLDER/demo/php/"config.*.inc.php "$WEB_FOLDER/"

    # Link themes
    for THEME in $THEMES ; do
        if [ ! -e "$WEB_FOLDER/$THEMES_FOLDER/$THEME" ] ; then
            debugLog "Copying theme: $THEME"
            cp -rp "$GIT_STORAGE/themes/$THEME" "$WEB_FOLDER/$THEMES_FOLDER/$THEME"
        fi
    done

    # Apply permissions globally
    chgrp -R "$WEB_GROUP" "$WEB_FOLDER"

    # Apply permissions to files and folders
    find "$WEB_FOLDER" -type d -exec chmod 0755 {} \;
    find "$WEB_FOLDER" -type f -exec chmod 0644 {} \;

    # Create temp dir
    mkdir -p "$WEB_FOLDER/tmp/"
    chmod 770 "$WEB_FOLDER/tmp/"
    chgrp "$WEB_GROUP" "$WEB_FOLDER/tmp/"
done

debugLog "Deleting stale directories"

# Delete stale directories
find "$WEB_STORAGE" -maxdepth 1 -mindepth 1 -type d | while read DIRNAME ; do
    FOLDER_NAME=${DIRNAME##*/}

    # Build web folders
    for VARIANT_DATA in $VARIANTS ; do
        VARIANT_NAME=${VARIANT_DATA%%:*}
        VARIANT_BRANCH=${VARIANT_DATA##*:}
        if [ -z "$VARIANT_NAME" ] || [ -z "$VARIANT_BRANCH" ] ; then
            debugLog "Invalid variant data: $VARIANT_DATA"
            continue
        fi

        if [ "$FOLDER_NAME" = "$VARIANT_NAME" ] ; then
            debugLog "Known variant: $FOLDER_NAME"
            continue 2
        fi
    done

    debugLog "Deleting stale variant $FOLDER_NAME"
    #rm -rf "$DIRNAME"
done

debugLog "All done"
